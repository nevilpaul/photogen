{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handle_over","event","preventDefault","stopPropagation","handle_enter","undefined","target","parentNode","children","style","display","console","log","handle_drop","dt","dataTransfer","file","files","setState","imagefile","fileLength","length","type","startsWith","reader","FileReader","addEventListener","imageResult","result","readAsDataURL","clicked_event","clicker","document","getElementById","clickImageChanger","e","click","classify_image","ml5","imageClassifier","predict","err","results","state","react_default","a","createElement","className","onDragOver","bind","onDragEnter","onDrop","src","alt","id","onClick","name","onChange","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f5935f44.chunk.js","sourcesContent":["import React from 'react';\nimport ml5 from \"ml5\"\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    // this.canvasCreatePreview = React.createRef();\n    this.state = {\n        imagefile:\"\",\n        imageResult:\"\"\n    }\n}\n  handle_over = event => {\n    event.preventDefault();\n    event.stopPropagation();\n  }\n  handle_enter = event => {\n      event.preventDefault();\n      event.stopPropagation();\n      // event.target.parentNode.children[1].style.display = \"none\";\n      event.target.parentNode.children[1].children[0] !== undefined ? event.target.parentNode.children[1].children[0].style.display = \"none\":console.log('no child')\n      \n  }\n  handle_drop = event => {\n      event.preventDefault();\n      event.stopPropagation();\n      var dt = event.dataTransfer;\n      var file = dt.files[0];\n      this.setState({\n          imagefile: file\n      });\n      var fileLength = dt.files.length;\n \n      if (file.type.startsWith(\"image/\") && fileLength === 1) {\n          // var image = document.querySelector('.ReactCrop__image');\n          var reader = new FileReader();\n          reader.addEventListener('load', ()=> {\n              this.setState({\n                imageResult: reader.result\n              });\n          },false);\n          reader.readAsDataURL(file);\n      }\n  }\n  clicked_event = event =>{\n    event.preventDefault();\n    let clicker = document.getElementById('dragImage');\n    var dt = event.target;\n    console.log(dt)\n    var file = dt.files[0];\n    console.log(file)\n    this.setState({\n      imagefile: file\n    });\n    var fileLength = dt.files.length;\n \n    if (file.type.startsWith(\"image/\") && fileLength === 1) {\n      // var image = document.querySelector('.ReactCrop__image');\n      var reader = new FileReader();\n      reader.addEventListener('load', ()=> {\n        clicker.style.display =\"none\";\n        this.setState({\n          imageResult: reader.result\n        });\n      },false);\n      reader.readAsDataURL(file);\n    }\n\n  }\n  clickImageChanger =e=>{\n    let clicked = document.getElementById('imageUpload');\n    clicked.click();\n  }\n  classify_image = event =>{\n    // Initialize the Image Classifier method with MobileNet\n  const classifier = ml5.imageClassifier('MobileNet', modelLoaded);\n\n  // When the model is loaded\n  function modelLoaded() {\n    console.log('Model Loaded!');\n  }\n\n  // Make a prediction with a selected image\n  classifier.predict(document.getElementById('image'), function(err, results) {\n    console.log(results);\n  });\n  }\n  render(){\n    const {imageResult} = this.state;\n    return (\n      <div className=\"App\">\n      <h2>Image Classifier | php_ml</h2>\n        <div className=\"place\" onDragOver={this.handle_over.bind(this)} onDragEnter={this.handle_enter.bind(this)} onDrop={this.handle_drop.bind(this)}>\n          {\n            imageResult === '' ?\"\":<img src = {imageResult} alt=\"\" className=\"imageScaler\" id=\"image\"/>\n          }\n          <div className=\"dragImage\" id=\"dragImage\" onClick={this.clickImageChanger.bind(this)}>\n              <p>Select Image to upload Or drag and drop video files</p>\n          </div>\n          <input className=\"file\" type=\"file\" name=\"imageUpload\" id=\"imageUpload\" onChange={this.clicked_event.bind(this)}/>\n        </div>\n        <button className=\"name\" type=\"button\" value=\"submition\" onClick={this.classify_image.bind(this)}>Classify</button>\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}